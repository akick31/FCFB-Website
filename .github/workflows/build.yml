name: Build and Deploy React App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '**'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Run tests
      - name: Run tests
        run: npm test -- --watchAll=false

      # Build the React application
      - name: Build the app
        run: npm run build

      # Tag and push a new version
      - name: Tag and push new version
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/main')  # Only for `main` branch pushes
        id: tag_logic
        run: |
          # Fetch all tags
          git fetch --tags

          # Get the latest tag
          TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "1.0.0")
          echo "Latest tag: ${TAG}"

          # Split the tag into major, minor, and patch
          VERSION_REGEX="^([0-9]+)\.([0-9]+)\.([0-9]+)$"
          if [[ $TAG =~ $VERSION_REGEX ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
          else
            echo "No valid version found, starting with 1.0.0"
            MAJOR=1
            MINOR=0
            PATCH=0
          fi

          # Determine version increment based on commit messages
          if git log -1 --pretty=%B | grep -q "MAJOR:"; then
            NEW_MAJOR=$((MAJOR + 1))
            NEW_MINOR=0
            NEW_PATCH=0
          elif git log -1 --pretty=%B | grep -q "MINOR:"; then
            NEW_MAJOR=$MAJOR
            NEW_MINOR=$((MINOR + 1))
            NEW_PATCH=0
          else
            NEW_MAJOR=$MAJOR
            NEW_MINOR=$MINOR
            NEW_PATCH=$((PATCH + 1))
          fi

          NEW_TAG="${NEW_MAJOR}.${NEW_MINOR}.${NEW_PATCH}"
          echo "New tag will be: ${NEW_TAG}"

          # Create and push the new tag
          git tag $NEW_TAG
          git push origin $NEW_TAG

      # Get Jenkins crumb
      - name: Get Jenkins crumb
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/main')
        id: get_crumb
        run: |
          CRUMB=$(curl -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" -X GET "http://51.81.32.234:8080/crumbIssuer/api/json" | jq -r .crumb)
          echo "::set-output name=crumb::$CRUMB"

      # Trigger Jenkins build
      - name: Trigger Jenkins build
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/main')
        run: |
          curl -X POST "http://51.81.32.234:8080/job/FCFB-Discord-Ref-Bot_PRD/build?token=${{ secrets.JENKINS_TOKEN }}" \
            -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" \
            -H "Jenkins-Crumb: ${{ steps.get_crumb.outputs.crumb }}"
        env:
          JENKINS_USER: ${{ secrets.JENKINS_USER }}
          JENKINS_TOKEN: ${{ secrets.JENKINS_API_TOKEN }}